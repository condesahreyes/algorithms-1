EJERCICIOS 

1)	Complete la implementación ListaPosIntImp del TAD ListaPosInt especificado en el proyecto, 
    de forma que las operaciones elemento y cantidadElementos se realicen en tiempo de ejecución 
	constante en el peor caso. 
    La implementación no debe ser acotada.
	//PRONTA

2)	Complete la implementación PilaIntImp del TAD PilaInt especificado en el proyecto, 
	de forma que las operaciones para push, top, pop y cantidadElementos se realicen 
	en tiempo de ejecución constante en el peor caso.
	La implementación no debe ser acotada. 
	//PRONTA

3)	Complete la implementación ColaIntImp del TAD ColaInt especificado en el proyecto,
	de forma que las operaciones para encolar, principio, desencolar y cantidadElementos
	se realicen en tiempo de ejecución constante en el peor caso.  
	La implementación no debe ser acotada. 
	//PRONTA

4)	Considere la siguiente definición del tipo árbol binario de enteros ordenado (ABB):
	struct NodoABInt { 
		int dato;
		NodoABInt *izq, *der; 
	};
	Implemente una función Enlistar, que recibiendo un puntero a un ABB de tipo NodoABInt, 
	retorne una ListaOrdInt con los mismos elementos presentes en el árbol. 
	El árbol parámetro debe recorrerse una única vez.

	ListaOrdInt Enlistar(NodoABInt* a) 
	//PRONTA

5)	Implemente una función UnionListaOrd que dadas dos listas de tipo ListaOrdInt: l1 y l2, 
	retorne una nueva lista ordenada (ListaOrdInt) que contenga todos los elementos presentes en l1 y l2. 
	La nueva lista no deberá compartir registros de memoria con las listas parámetros y 
	las listas parámetro no deberán ser modificadas. 

	ListaOrdInt UnionListaOrd(ListaOrdInt l1, ListaOrdInt l2); 
	//PRONTA

6)	Implemente la función EstaContenida que dadas dos pilas: p1 y p2, de tipo PilaInt retorne true si y solo 
	si todos los elementos de p1 se encuentran en p2.
	Si hay valores repetidos en p1, entonces se tienen que encontrar como mínimo la misma cantidad 
	de repetidos de ese valor en p2.

	bool EstaContenida(PilaInt p1, PilaInt p2)  
	//PRONTA

7)	Complete la implementación DiccionarioIntImp del TAD DiccionarioInt especificado en el proyecto, 
	de forma que las operaciones agregar, borrar y pertenece se realicen en tiempo de ejecución O(1) promedio. 
	Usar hashing abierto, considerando a la operación módulo adecuada como función de hash.
	La implementación no debe ser acotada. 
	Al crear el diccionario se recibe la cantidad esperada de elementos, aunque puedan insertarse más elementos.

8)	Complete la implementación ListaOrdIntImp2 del TAD ListaOrdInt especificado en el proyecto, de forma que 
	las operaciones agregar, borrar, existe se realicen en tiempo de ejecución O(log2n) en promedio y 
	cantidadElementos en O(1).
	La implementación no debe ser acotada.
	//PRONTA

9)	Complete la implementación TablaIntStringImp del TAD TablaIntString especificado en el proyecto, 
	de forma que las operaciones agregar, borrar, estaDefinida y recuperar se realicen en 
	tiempo de ejecución O(1) promedio. 
	Usar hashing abierto, considerando a la operación módulo adecuada como función de hash.
	La implementación no debe ser acotada. 
	Al crear la tabla se recibe la cantidad esperada de elementos, aunque puedan insertarse más elementos.
	//PRONTA

10)	Complete la implementación MultisetIntImp del TAD MultisetInt especificado en el proyecto.
	La implementación no debe ser acotada. //HECHA 

11)	Dado un multiset, retorna una ListaOrdInt con los elementos que aparecen mas de una vez en el multiset.
	Ejemplo: 
	Dado el multiset con los elementos (1,5,9,1,2,9,9) retorna la lista (1,9)

	ListaOrdInt ObtenerRepetidos(MultisetInt m); 
	//PRONTA

12)	Dados dos multisets m1 y m2, retorna un nuevo multiset con los elementos que estan en m1 o en m2, pero no en los dos.

	MultisetInt Xor(MultisetInt m1, MultisetInt m2);	//HECHA 

13)	Complete la implementación ColaPrioridadImp del TAD ColaPrioridad especificado en el proyecto.
	La implementación no debe ser acotada. //HECHA

14)	Implemente una función MenorPrioridad que dada una cola de prioridad retorne una nueva cola de prioridad que solamente contenga
    los elementos que tengan la menor prioridad (varios elementos pueden tener la misma prioridad pero distinto orden de llegada).
    Si la cola es vacia entonces se debe retornar una cola vacia.
    No se puede usar otro TAD ni otras estructuras auxiliares para resolver el ejercicio.     

    Considere el siguiente ejemplo donde E es el elemento encolado y P su prioridad. 
    (Los primeros que se muestran son los primeros en decolar)
    c = {E:4|P:7} {E:-1|P:7} {E:13|P:6} {E:-24|P:2} {E:44|P:2} 
    retorno = {E:-24|P:2} {E:44|P:2} 

    ColaPrioridadInt MenorPrioridad(ColaPrioridadInt c);
	//PRONTA



